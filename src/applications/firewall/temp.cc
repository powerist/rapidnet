/* A RapidNet application. Generated by RapidNet compiler. */

#include "temp.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::temp;

const string Temp::OPENCONNECTIONTOCONTROLLER = "openConnectionToController";
const string Temp::PKTIN = "pktIn";
const string Temp::PKTRECEIVED = "pktReceived";
const string Temp::TRUSTEDCONTROLLERMEMORY = "trustedControllerMemory";
const string Temp::TRUSTEDCONTROLLERMEMORYSEND = "trustedControllerMemorysend";

NS_LOG_COMPONENT_DEFINE ("Temp");
NS_OBJECT_ENSURE_REGISTERED (Temp);

TypeId
Temp::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::temp::Temp")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Temp> ()
    ;
  return tid;
}

Temp::Temp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Temp::~Temp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Temp::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Temp::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Temp Application Started");
}

void
Temp::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Temp Application Stopped");
}

void
Temp::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (OPENCONNECTIONTOCONTROLLER, attrdeflist (
    attrdef ("openConnectionToController_attr1", IPV4),
    attrdef ("openConnectionToController_attr2", IPV4)));

  AddRelationWithKeys (PKTIN, attrdeflist (
    attrdef ("pktIn_attr1", IPV4),
    attrdef ("pktIn_attr2", IPV4),
    attrdef ("pktIn_attr3", IPV4),
    attrdef ("pktIn_attr4", IPV4)));

  AddRelationWithKeys (TRUSTEDCONTROLLERMEMORY, attrdeflist (
    attrdef ("trustedControllerMemory_attr1", IPV4),
    attrdef ("trustedControllerMemory_attr2", IPV4),
    attrdef ("trustedControllerMemory_attr3", IPV4)));

}

void
Temp::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, PKTIN))
    {
      Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, TRUSTEDCONTROLLERMEMORYSEND))
    {
      ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, PKTRECEIVED))
    {
      _eca (tuple);
    }
}

void
Temp::Eca2Ins (Ptr<Tuple> pktIn)
{
  RAPIDNET_LOG_INFO ("Eca2Ins triggered");

  Ptr<Tuple> result = pktIn;

  result->Assign (Assignor::New ("$1",
    ValueExpr::New (Int32Value::New (2))));

  result->Assign (Assignor::New ("$2",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    PKTRECEIVED,
    strlist ("pktIn_attr3",
      "$1",
      "pktIn_attr2",
      "$2",
      "pktIn_attr1",
      "pktIn_attr3"),
    strlist ("pktReceived_attr1",
      "pktReceived_attr2",
      "pktReceived_attr3",
      "pktReceived_attr4",
      "pktReceived_attr5",
      RN_DEST));

  Send (result);
}

void
Temp::ECAMat (Ptr<Tuple> trustedControllerMemorysend)
{
  RAPIDNET_LOG_INFO ("ECAMat triggered");

  Ptr<Tuple> result = trustedControllerMemorysend;

  result = result->Project (
    TRUSTEDCONTROLLERMEMORY,
    strlist ("trustedControllerMemorysend_attr1",
      "trustedControllerMemorysend_attr2",
      "trustedControllerMemorysend_attr3"),
    strlist ("trustedControllerMemory_attr1",
      "trustedControllerMemory_attr2",
      "trustedControllerMemory_attr3"));

  Insert (result);
}

void
Temp::_eca (Ptr<Tuple> pktReceived)
{
  RAPIDNET_LOG_INFO ("_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OPENCONNECTIONTOCONTROLLER)->Join (
    pktReceived,
    strlist ("openConnectionToController_attr1"),
    strlist ("pktReceived_attr1"));

  result = result->Project (
    TRUSTEDCONTROLLERMEMORYSEND,
    strlist ("openConnectionToController_attr2",
      "pktReceived_attr5",
      "pktReceived_attr1",
      "openConnectionToController_attr2"),
    strlist ("trustedControllerMemorysend_attr1",
      "trustedControllerMemorysend_attr2",
      "trustedControllerMemorysend_attr3",
      RN_DEST));

  Send (result);
}

