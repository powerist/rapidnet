/* A RapidNet application. Generated by RapidNet compiler. */

#include "sdn-mac-learning.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::sdnmaclearning;

const string SdnMacLearning::FLOWENTRY = "flowEntry";
const string SdnMacLearning::FLOWMOD = "flowMod";
const string SdnMacLearning::INPORT = "inPort";
const string SdnMacLearning::MACPORT = "macPort";
const string SdnMacLearning::MISSENTRY = "missEntry";
const string SdnMacLearning::OFPACKET = "ofPacket";
const string SdnMacLearning::OFCONN = "ofconn";
const string SdnMacLearning::OUTPORT = "outPort";
const string SdnMacLearning::PACKET = "packet";
const string SdnMacLearning::PACKETDELETE = "packetDelete";
const string SdnMacLearning::RS4PACKETSEND = "rs4packetsend";

NS_LOG_COMPONENT_DEFINE ("SdnMacLearning");
NS_OBJECT_ENSURE_REGISTERED (SdnMacLearning);

TypeId
SdnMacLearning::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::sdnmaclearning::SdnMacLearning")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<SdnMacLearning> ()
    ;
  return tid;
}

SdnMacLearning::SdnMacLearning()
{
  NS_LOG_FUNCTION_NOARGS ();
}

SdnMacLearning::~SdnMacLearning()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
SdnMacLearning::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
SdnMacLearning::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("SdnMacLearning Application Started");
}

void
SdnMacLearning::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("SdnMacLearning Application Stopped");
}

void
SdnMacLearning::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", STR)));

  AddRelationWithKeys (INPORT, attrdeflist (
    attrdef ("inPort_attr3", INT32)));

  AddRelationWithKeys (MACPORT, attrdeflist (
    attrdef ("macPort_attr2", IPV4),
    attrdef ("macPort_attr3", INT32)));

  AddRelationWithKeys (MISSENTRY, attrdeflist (
    attrdef ("missEntry_attr2", STR)));

  AddRelationWithKeys (OFCONN, attrdeflist (
    attrdef ("ofconn_attr2", IPV4)));

  AddRelationWithKeys (OUTPORT, attrdeflist (
    attrdef ("outPort_attr3", INT32)));

  AddRelationWithKeys (PACKET, attrdeflist (
    attrdef ("packet_attr2", IPV4),
    attrdef ("packet_attr3", STR),
    attrdef ("packet_attr4", STR)));

}

void
SdnMacLearning::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, OFPACKET))
    {
      Rc1_eca (tuple);
    }
  if (IsRecvEvent (tuple, OFPACKET))
    {
      Rc2_eca (tuple);
    }
  if (IsInsertEvent (tuple, OFCONN))
    {
      Rs1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PACKET))
    {
      Rs1Eca1Ins (tuple);
    }
  if (IsInsertEvent (tuple, INPORT))
    {
      Rs1Eca2Ins (tuple);
    }
  if (IsInsertEvent (tuple, MISSENTRY))
    {
      Rs1Eca3Ins (tuple);
    }
  if (IsRecvEvent (tuple, FLOWMOD))
    {
      Rs2_eca (tuple);
    }
  if (IsRecvEvent (tuple, FLOWMOD))
    {
      Rs3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RS4PACKETSEND))
    {
      Rs4Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, PACKETDELETE))
    {
      Rs4Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, PACKET))
    {
      Rs4Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, PACKET))
    {
      Rs4Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, INPORT))
    {
      Rs4Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, INPORT))
    {
      Rs4Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, OUTPORT))
    {
      Rs4Eca2Ins (tuple);
    }
  if (IsDeleteEvent (tuple, OUTPORT))
    {
      Rs4Eca2Del (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      Rs4Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FLOWENTRY))
    {
      Rs4Eca3Del (tuple);
    }
}

void
SdnMacLearning::Rc1_eca (Ptr<Tuple> ofPacket)
{
  RAPIDNET_LOG_INFO ("Rc1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    ofPacket,
    strlist ("ofconn_attr1", "ofconn_attr2"),
    strlist ("ofPacket_attr1", "ofPacket_attr2"));

  result = result->Project (
    MACPORT,
    strlist ("ofPacket_attr1",
      "ofPacket_attr2",
      "ofPacket_attr3",
      "ofPacket_attr4"),
    strlist ("macPort_attr1",
      "macPort_attr2",
      "macPort_attr3",
      "macPort_attr4"));

  Insert (result);
}

void
SdnMacLearning::Rc2_eca (Ptr<Tuple> ofPacket)
{
  RAPIDNET_LOG_INFO ("Rc2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    ofPacket,
    strlist ("ofconn_attr1", "ofconn_attr2"),
    strlist ("ofPacket_attr1", "ofPacket_attr2"));

  result = GetRelation (MACPORT)->Join (
    result,
    strlist ("macPort_attr1", "macPort_attr4", "macPort_attr2"),
    strlist ("ofPacket_attr1", "ofPacket_attr5", "ofPacket_attr2"));

  result = result->Project (
    FLOWMOD,
    strlist ("ofPacket_attr2",
      "ofPacket_attr5",
      "macPort_attr3",
      "ofPacket_attr2"),
    strlist ("flowMod_attr1",
      "flowMod_attr2",
      "flowMod_attr3",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs1Eca0Ins (Ptr<Tuple> ofconn)
{
  RAPIDNET_LOG_INFO ("Rs1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    ofconn,
    strlist ("packet_attr1"),
    strlist ("ofconn_attr1"));

  result = GetRelation (INPORT)->Join (
    result,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "ofconn_attr1"));

  result = GetRelation (MISSENTRY)->Join (
    result,
    strlist ("missEntry_attr2", "missEntry_attr1"),
    strlist ("packet_attr4", "ofconn_attr1"));

  result = result->Project (
    OFPACKET,
    strlist ("ofconn_attr2",
      "ofconn_attr1",
      "inPort_attr3",
      "packet_attr3",
      "packet_attr4",
      "ofconn_attr2"),
    strlist ("ofPacket_attr1",
      "ofPacket_attr2",
      "ofPacket_attr3",
      "ofPacket_attr4",
      "ofPacket_attr5",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs1Eca1Ins (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    packet,
    strlist ("ofconn_attr1"),
    strlist ("packet_attr1"));

  result = GetRelation (INPORT)->Join (
    result,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "packet_attr1"));

  result = GetRelation (MISSENTRY)->Join (
    result,
    strlist ("missEntry_attr2", "missEntry_attr1"),
    strlist ("packet_attr4", "packet_attr1"));

  result = result->Project (
    OFPACKET,
    strlist ("ofconn_attr2",
      "packet_attr1",
      "inPort_attr3",
      "packet_attr3",
      "packet_attr4",
      "ofconn_attr2"),
    strlist ("ofPacket_attr1",
      "ofPacket_attr2",
      "ofPacket_attr3",
      "ofPacket_attr4",
      "ofPacket_attr5",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs1Eca2Ins (Ptr<Tuple> inPort)
{
  RAPIDNET_LOG_INFO ("Rs1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    inPort,
    strlist ("ofconn_attr1"),
    strlist ("inPort_attr1"));

  result = GetRelation (PACKET)->Join (
    result,
    strlist ("packet_attr2", "packet_attr1"),
    strlist ("inPort_attr2", "inPort_attr1"));

  result = GetRelation (MISSENTRY)->Join (
    result,
    strlist ("missEntry_attr2", "missEntry_attr1"),
    strlist ("packet_attr4", "inPort_attr1"));

  result = result->Project (
    OFPACKET,
    strlist ("ofconn_attr2",
      "inPort_attr1",
      "inPort_attr3",
      "packet_attr3",
      "packet_attr4",
      "ofconn_attr2"),
    strlist ("ofPacket_attr1",
      "ofPacket_attr2",
      "ofPacket_attr3",
      "ofPacket_attr4",
      "ofPacket_attr5",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs1Eca3Ins (Ptr<Tuple> missEntry)
{
  RAPIDNET_LOG_INFO ("Rs1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    missEntry,
    strlist ("ofconn_attr1"),
    strlist ("missEntry_attr1"));

  result = GetRelation (PACKET)->Join (
    result,
    strlist ("packet_attr4", "packet_attr1"),
    strlist ("missEntry_attr2", "missEntry_attr1"));

  result = GetRelation (INPORT)->Join (
    result,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "missEntry_attr1"));

  result = result->Project (
    OFPACKET,
    strlist ("ofconn_attr2",
      "missEntry_attr1",
      "inPort_attr3",
      "packet_attr3",
      "missEntry_attr2",
      "ofconn_attr2"),
    strlist ("ofPacket_attr1",
      "ofPacket_attr2",
      "ofPacket_attr3",
      "ofPacket_attr4",
      "ofPacket_attr5",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs2_eca (Ptr<Tuple> flowMod)
{
  RAPIDNET_LOG_INFO ("Rs2_eca triggered");

  Ptr<Tuple> result = flowMod;

  result = result->Project (
    FLOWENTRY,
    strlist ("flowMod_attr1",
      "flowMod_attr2",
      "flowMod_attr3"),
    strlist ("flowEntry_attr1",
      "flowEntry_attr2",
      "flowEntry_attr3"));

  Insert (result);
}

void
SdnMacLearning::Rs3_eca (Ptr<Tuple> flowMod)
{
  RAPIDNET_LOG_INFO ("Rs3_eca triggered");

  Ptr<Tuple> result = flowMod;

  result = result->Project (
    MISSENTRY,
    strlist ("flowMod_attr1",
      "flowMod_attr2"),
    strlist ("missEntry_attr1",
      "missEntry_attr2"));

  Delete (result);
}

void
SdnMacLearning::Rs4Eca0RemoteIns (Ptr<Tuple> rs4packetsend)
{
  RAPIDNET_LOG_INFO ("Rs4Eca0RemoteIns triggered");

  Ptr<Tuple> result = rs4packetsend;

  result = result->Project (
    PACKET,
    strlist ("rs4packetsend_attr1",
      "rs4packetsend_attr2",
      "rs4packetsend_attr3",
      "rs4packetsend_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  Insert (result);
}

void
SdnMacLearning::Rs4Eca0RemoteDel (Ptr<Tuple> packetDelete)
{
  RAPIDNET_LOG_INFO ("Rs4Eca0RemoteDel triggered");

  Ptr<Tuple> result = packetDelete;

  result = result->Project (
    PACKET,
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  Delete (result);
}

void
SdnMacLearning::Rs4Eca0Ins (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs4Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INPORT)->Join (
    packet,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "packet_attr1"));

  result = GetRelation (OUTPORT)->Join (
    result,
    strlist ("outPort_attr1"),
    strlist ("packet_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("packet_attr4", "outPort_attr3", "packet_attr1"));

  result = result->Project (
    RS4PACKETSEND,
    strlist ("outPort_attr2",
      "packet_attr1",
      "packet_attr3",
      "packet_attr4",
      "outPort_attr2"),
    strlist ("rs4packetsend_attr1",
      "rs4packetsend_attr2",
      "rs4packetsend_attr3",
      "rs4packetsend_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs4Eca0Del (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs4Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INPORT)->Join (
    packet,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "packet_attr1"));

  result = GetRelation (OUTPORT)->Join (
    result,
    strlist ("outPort_attr1"),
    strlist ("packet_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("packet_attr4", "outPort_attr3", "packet_attr1"));

  result = result->Project (
    PACKETDELETE,
    strlist ("outPort_attr2",
      "packet_attr1",
      "packet_attr3",
      "packet_attr4",
      "outPort_attr2"),
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs4Eca1Ins (Ptr<Tuple> inPort)
{
  RAPIDNET_LOG_INFO ("Rs4Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    inPort,
    strlist ("packet_attr2", "packet_attr1"),
    strlist ("inPort_attr2", "inPort_attr1"));

  result = GetRelation (OUTPORT)->Join (
    result,
    strlist ("outPort_attr1"),
    strlist ("inPort_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("packet_attr4", "outPort_attr3", "inPort_attr1"));

  result = result->Project (
    RS4PACKETSEND,
    strlist ("outPort_attr2",
      "inPort_attr1",
      "packet_attr3",
      "packet_attr4",
      "outPort_attr2"),
    strlist ("rs4packetsend_attr1",
      "rs4packetsend_attr2",
      "rs4packetsend_attr3",
      "rs4packetsend_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs4Eca1Del (Ptr<Tuple> inPort)
{
  RAPIDNET_LOG_INFO ("Rs4Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    inPort,
    strlist ("packet_attr2", "packet_attr1"),
    strlist ("inPort_attr2", "inPort_attr1"));

  result = GetRelation (OUTPORT)->Join (
    result,
    strlist ("outPort_attr1"),
    strlist ("inPort_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("packet_attr4", "outPort_attr3", "inPort_attr1"));

  result = result->Project (
    PACKETDELETE,
    strlist ("outPort_attr2",
      "inPort_attr1",
      "packet_attr3",
      "packet_attr4",
      "outPort_attr2"),
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs4Eca2Ins (Ptr<Tuple> outPort)
{
  RAPIDNET_LOG_INFO ("Rs4Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    outPort,
    strlist ("packet_attr1"),
    strlist ("outPort_attr1"));

  result = GetRelation (INPORT)->Join (
    result,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "outPort_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("packet_attr4", "outPort_attr3", "outPort_attr1"));

  result = result->Project (
    RS4PACKETSEND,
    strlist ("outPort_attr2",
      "outPort_attr1",
      "packet_attr3",
      "packet_attr4",
      "outPort_attr2"),
    strlist ("rs4packetsend_attr1",
      "rs4packetsend_attr2",
      "rs4packetsend_attr3",
      "rs4packetsend_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs4Eca2Del (Ptr<Tuple> outPort)
{
  RAPIDNET_LOG_INFO ("Rs4Eca2Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    outPort,
    strlist ("packet_attr1"),
    strlist ("outPort_attr1"));

  result = GetRelation (INPORT)->Join (
    result,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "outPort_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr2", "flowEntry_attr3", "flowEntry_attr1"),
    strlist ("packet_attr4", "outPort_attr3", "outPort_attr1"));

  result = result->Project (
    PACKETDELETE,
    strlist ("outPort_attr2",
      "outPort_attr1",
      "packet_attr3",
      "packet_attr4",
      "outPort_attr2"),
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs4Eca3Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Rs4Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    flowEntry,
    strlist ("packet_attr4", "packet_attr1"),
    strlist ("flowEntry_attr2", "flowEntry_attr1"));

  result = GetRelation (INPORT)->Join (
    result,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "flowEntry_attr1"));

  result = GetRelation (OUTPORT)->Join (
    result,
    strlist ("outPort_attr3", "outPort_attr1"),
    strlist ("flowEntry_attr3", "flowEntry_attr1"));

  result = result->Project (
    RS4PACKETSEND,
    strlist ("outPort_attr2",
      "flowEntry_attr1",
      "packet_attr3",
      "flowEntry_attr2",
      "outPort_attr2"),
    strlist ("rs4packetsend_attr1",
      "rs4packetsend_attr2",
      "rs4packetsend_attr3",
      "rs4packetsend_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearning::Rs4Eca3Del (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Rs4Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    flowEntry,
    strlist ("packet_attr4", "packet_attr1"),
    strlist ("flowEntry_attr2", "flowEntry_attr1"));

  result = GetRelation (INPORT)->Join (
    result,
    strlist ("inPort_attr2", "inPort_attr1"),
    strlist ("packet_attr2", "flowEntry_attr1"));

  result = GetRelation (OUTPORT)->Join (
    result,
    strlist ("outPort_attr3", "outPort_attr1"),
    strlist ("flowEntry_attr3", "flowEntry_attr1"));

  result = result->Project (
    PACKETDELETE,
    strlist ("outPort_attr2",
      "flowEntry_attr1",
      "packet_attr3",
      "flowEntry_attr2",
      "outPort_attr2"),
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      RN_DEST));

  Send (result);
}

