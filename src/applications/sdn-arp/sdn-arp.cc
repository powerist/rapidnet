/* A RapidNet application. Generated by RapidNet compiler. */

#include "sdn-arp.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::sdnarp;

const string SdnArp::ARPMAPPING = "arpMapping";
const string SdnArp::ARPREPLY = "arpReply";
const string SdnArp::ARPREQUEST = "arpRequest";
const string SdnArp::FLOWENTRY = "flowEntry";
const string SdnArp::HOSTPOS = "hostPos";
const string SdnArp::LINKHST = "linkHst";
const string SdnArp::LINKSWC = "linkSwc";
const string SdnArp::OFCONNCTL = "ofconnCtl";
const string SdnArp::OFCONNSWC = "ofconnSwc";
const string SdnArp::PACKET = "packet";

NS_LOG_COMPONENT_DEFINE ("SdnArp");
NS_OBJECT_ENSURE_REGISTERED (SdnArp);

TypeId
SdnArp::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::sdnarp::SdnArp")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<SdnArp> ()
    ;
  return tid;
}

SdnArp::SdnArp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

SdnArp::~SdnArp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
SdnArp::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
SdnArp::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("SdnArp Application Started");
}

void
SdnArp::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("SdnArp Application Stopped");
}

void
SdnArp::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ARPMAPPING, attrdeflist (
    attrdef ("arpMapping_attr2", IPV4)));

  AddRelationWithKeys (ARPREPLY, attrdeflist (
    attrdef ("arpReply_attr2", IPV4),
    attrdef ("arpReply_attr3", STR),
    attrdef ("arpReply_attr4", IPV4),
    attrdef ("arpReply_attr5", STR)));

  AddRelationWithKeys (ARPREQUEST, attrdeflist (
    attrdef ("arpRequest_attr2", IPV4),
    attrdef ("arpRequest_attr3", STR),
    attrdef ("arpRequest_attr4", IPV4),
    attrdef ("arpRequest_attr5", STR)));

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", STR)));

  AddRelationWithKeys (HOSTPOS, attrdeflist (
    attrdef ("hostPos_attr2", IPV4)));

  AddRelationWithKeys (LINKHST, attrdeflist (
    attrdef ("linkHst_attr3", INT32)));

  AddRelationWithKeys (LINKSWC, attrdeflist (
    attrdef ("linkSwc_attr3", INT32)));

  AddRelationWithKeys (OFCONNCTL, attrdeflist (
    attrdef ("ofconnCtl_attr2", IPV4)));

  AddRelationWithKeys (OFCONNSWC, attrdeflist (
    attrdef ("ofconnSwc_attr2", IPV4)));

}

void
SdnArp::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LINKHST))
    {
      Rh1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, ARPREQUEST))
    {
      Rh1Eca1Ins (tuple);
    }
}

void
SdnArp::Rh1Eca0Ins (Ptr<Tuple> linkHst)
{
  RAPIDNET_LOG_INFO ("Rh1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ARPREQUEST)->Join (
    linkHst,
    strlist ("arpRequest_attr1"),
    strlist ("linkHst_attr1"));

  result->Assign (Assignor::New ("Req",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("Type",
    ValueExpr::New (StrValue::New ("ARP"))));

  result->Assign (Assignor::New ("Dst",
    ValueExpr::New (StrValue::New ("ff:ff:ff:ff:ff"))));

  result = result->Project (
    PACKET,
    strlist ("linkHst_attr2",
      "linkHst_attr1",
      "Dst",
      "arpRequest_attr5",
      "arpRequest_attr4",
      "arpRequest_attr3",
      "arpRequest_attr2",
      "Req",
      "Type",
      "linkHst_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      "packet_attr6",
      "packet_attr7",
      "packet_attr8",
      "packet_attr9",
      RN_DEST));

  Send (result);
}

void
SdnArp::Rh1Eca1Ins (Ptr<Tuple> arpRequest)
{
  RAPIDNET_LOG_INFO ("Rh1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINKHST)->Join (
    arpRequest,
    strlist ("linkHst_attr1"),
    strlist ("arpRequest_attr1"));

  result->Assign (Assignor::New ("Req",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("Type",
    ValueExpr::New (StrValue::New ("ARP"))));

  result->Assign (Assignor::New ("Dst",
    ValueExpr::New (StrValue::New ("ff:ff:ff:ff:ff"))));

  result = result->Project (
    PACKET,
    strlist ("linkHst_attr2",
      "arpRequest_attr1",
      "Dst",
      "arpRequest_attr5",
      "arpRequest_attr4",
      "arpRequest_attr3",
      "arpRequest_attr2",
      "Req",
      "Type",
      "linkHst_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "packet_attr5",
      "packet_attr6",
      "packet_attr7",
      "packet_attr8",
      "packet_attr9",
      RN_DEST));

  Send (result);
}

