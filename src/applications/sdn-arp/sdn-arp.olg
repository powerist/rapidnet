

/* Constants 
 * ---------
 */
#define BROADCAST "ff:ff:ff:ff:ff"
#define ALL_PORT 0
#define ARP_TYPE "ARP"
#define IPV4_TYPE "IPV4"
#define CONTROLLER "controller"
#define ARP_REQUEST 1
#define ARP_REPLY 2
#define ARP_PRIO 1





/* 
 * Database for controller
 * ------------------------
 * ofconnCtl(@Controller, Switch):
 *     Controller can talk to Switch
 *
 * arpMapping(@Controller, Ip, Mac)
 *     Controller knows that Ip is mapped to Mac
 * 
 * hostPos(@Controller, Host, Switch, Port)
 *     Controller registers that Host sent a packet to Switch via Port
 */
materialize(ofconnCtl,infinity,infinity,keys(2)). //Openflow connection to switches
/*Arguments: (controller, switch)*/
materialize(arpMapping,infinity,infinity,keys(2)). //Ip=>MAC mapping
/*Arguments: (controller, ip, mac)*/
materialize(hostPos,infinity,infinity,keys(2)). //Position of host
/*Arguments: (controller, host, switch, port)*/






/*
 * Database for switch
 * -------------------
 * ofconnSwc(@Switch, Controller)
 *     Switch can talk to Controller
 *
 * linkSwc(@Switch, Host, Port)
 *     Host has sent a packet to Switch via Port 
 *
 * flowEntry(@Switch, Match, Prio, Actions)
 *     Match, Prio, Action store values of constants 
 */
materialize(ofconnSwc,infinity,infinity,keys(2)). //Openflow connection to controller
/*Arguments: (switch, controller)*/
materialize(linkSwc,infinity,infinity,keys(3:int32)). //Inter-switch and switch-host connections
/*Arguments: (switch, switch/host, port)*/
materialize(flowEntry,infinity,infinity,keys(2:str)). //Flow table at switch
/*Arguments: (switch, match, priority, action)*/








/*
 * Database for host
 * -----------------
 * linkHst(@Host, Switch, Port)
 *     Host sends a packet to Switch via Port
 *
 * arpRequest(@Host, SrcIp, SrcMac, DstIp, DstMac)
 *     Host could be one of SrcIp/SrcMac, trying to send a packet to a destination
 *     Dst with ip address DstIp and mac address DstMac
 *
 * arpReply(@Host, SrcIp, SrcMac, DstIp, DstMac)
 *     Host could be one of SrcIp/SrcMac, trying to send a packet to a destination
 *     Dst with ip address DstIp and mac address DstMac
 */
materialize(linkHst,infinity,infinity,keys(3:int32)). //Host-switch connection
/*Arguments: (host, switch, port)*/
materialize(arpRequest,infinity,infinity,keys(2,3:str,4,5:str)). //ARP requests
/*Arguments: (host, src_ip, src_mac, dst_ip, dst_mac)*/
materialize(arpReply,infinity,infinity,keys(2,3:str,4,5:str)). //ARP replys
/*Arguments: (host, src_ip, src_mac, dst_ip, dst_mac)*/







/* mapping
 * -------
 * portAndSrcMapping(@Controller, Port, Host)
 *    Controller has a mapping between Port and Host, where Host is an Ip/Mac address
 */
materialize(portAndSrcMapping,infinity,infinity,keys(2:int32,3)).









/* 
 * Non-materialized tuples
 * -----------------------
 * packet(@Switch, Host, Dst, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type)
 * packetOut(@Switch, Controller, Port, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type)
 * packetIn(@Controller, Switch, InPort, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type)
 */

/* ********************************************************** */

/* 
 * Host program 
 * Send ARP request to directly connected switch
 */
rh1 packet(@Switch, Host, Dst, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type) :-
	linkHst(@Host, Switch, Port),
	arpRequest(@Host, SrcIp, SrcMac, DstIp, DstMac),
	Arptype := ARP_REQUEST,
	Type := ARP_TYPE,
	Dst := BROADCAST.

/* Received packet from switch and extract ARP reply packets */
rh2 arpReply(@Host, SrcIp, SrcMac, DstIp, DstMac) :-
	linkHst(@Host, Switch, Port),
	packet(@Switch, Host, Dst, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type),
	Dst == Host.

/* ********************************************************** */

/* 
 * Controller program
 * Register host position
 */
rc1 hostPos(@Controller, SrcHost, Switch, InPort) :-
	ofconnCtl(@Controller, Switch),
	portAndSrcMapping(@Controller, InPort, SrcHost),
	packetIn(@Controller, Switch, InPort, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type).

/*Recover ARP request*/
rc2 arpReqCtl(@Controller, SrcIp, SrcMac, DstIp, DstMac) :-
	packetIn(@Controller, Switch, InPort, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type),
	ofconnCtl(@Controller, Switch),
	Type == ARP_TYPE,
	Arptype == ARP_REQUEST.

/*Learn ARP mapping*/
rc3 arpMapping(@Controller, SrcIp, SrcMac) :-
	arpReqCtl(@Controller, SrcIp, SrcMac, DstIp, DstMac).

/*Generate ARP reply*/
rc4 arpReplyCtl(@Controller, DstIp, Mac, SrcIp, SrcMac) :-
	arpReqCtl(@Controller, SrcIp, SrcMac, DstIp, DstMac),
	arpMapping(@Controller, DstIp, Mac).

/*Send out packet_out message*/
rc6 packetOut(@Switch, Controller, Port, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type) :-
	arpReplyCtl(@Controller, SrcIp, SrcMac, DstIp, DstMac),
	ofconnCtl(@Controller, Switch),
	hostPos(@Controller, SrcIp, Switch, Port),
	Arptype := ARP_REPLY,
	Type := ARP_TYPE.

/************************************************************/
/*Switch program*/
rs1 packetIn(@Controller, Switch, InPort, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type) :-
	ofconnSwc(@Switch, Controller),
	packet(@Switch, Host, Dst, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type),
	linkSwc(@Switch, Host, InPort),
	Type == ARP_TYPE,
	Prio == ARP_PRIO,
	Actions == CONTROLLER,
	flowEntry(@Switch, Match, Prio, Actions).

rs2 packet(@Host, Switch, Host, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type) :-
	packetOut(@Switch, Controller, OutPort, DstMac, DstIp, SrcMac, SrcIp, Arptype, Type),
	linkSwc(@Switch, Host, Port).









