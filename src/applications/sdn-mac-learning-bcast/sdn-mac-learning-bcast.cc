/* A RapidNet application. Generated by RapidNet compiler. */

#include "sdn-mac-learning-bcast.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::sdnmaclearningbcast;

const string SdnMacLearningBcast::BROADCAST = "broadcast";
const string SdnMacLearningBcast::FLOWENTRY = "flowEntry";
const string SdnMacLearningBcast::FLOWMOD = "flowMod";
const string SdnMacLearningBcast::INITPACKET = "initPacket";
const string SdnMacLearningBcast::LINK = "link";
const string SdnMacLearningBcast::MATCHINGPACKET = "matchingPacket";
const string SdnMacLearningBcast::MAXPRIORITY = "maxPriority";
const string SdnMacLearningBcast::OFPACKET = "ofPacket";
const string SdnMacLearningBcast::OFCONN = "ofconn";
const string SdnMacLearningBcast::PACKET = "packet";
const string SdnMacLearningBcast::RECVPACKET = "recvPacket";

NS_LOG_COMPONENT_DEFINE ("SdnMacLearningBcast");
NS_OBJECT_ENSURE_REGISTERED (SdnMacLearningBcast);

TypeId
SdnMacLearningBcast::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::sdnmaclearningbcast::SdnMacLearningBcast")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<SdnMacLearningBcast> ()
    ;
  return tid;
}

SdnMacLearningBcast::SdnMacLearningBcast()
{
  NS_LOG_FUNCTION_NOARGS ();
}

SdnMacLearningBcast::~SdnMacLearningBcast()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
SdnMacLearningBcast::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
SdnMacLearningBcast::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("SdnMacLearningBcast Application Started");
}

void
SdnMacLearningBcast::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("SdnMacLearningBcast Application Stopped");
}

void
SdnMacLearningBcast::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", STR)));

  AddRelationWithKeys (INITPACKET, attrdeflist (
    attrdef ("initPacket_attr2", IPV4),
    attrdef ("initPacket_attr3", STR),
    attrdef ("initPacket_attr4", STR)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (MAXPRIORITY, attrdeflist (
    attrdef ("maxPriority_attr1", IPV4)));

  AddRelationWithKeys (OFCONN, attrdeflist (
    attrdef ("ofconn_attr2", IPV4)));

  AddRelationWithKeys (RECVPACKET, attrdeflist (
    attrdef ("recvPacket_attr2", STR),
    attrdef ("recvPacket_attr3", STR)));

}

void
SdnMacLearningBcast::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, OFPACKET))
    {
      Rc1_eca (tuple);
    }
  if (IsRecvEvent (tuple, OFPACKET))
    {
      Rc2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rs1_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs2_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs3_eca (tuple);
    }
  if (IsRecvEvent (tuple, MATCHINGPACKET))
    {
      Rs4_eca (tuple);
    }
  if (IsRecvEvent (tuple, FLOWMOD))
    {
      Rs5_eca (tuple);
    }
  if (IsInsertEvent (tuple, FLOWENTRY))
    {
      Rs6Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FLOWENTRY))
    {
      Rs6Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, BROADCAST))
    {
      Rs7_eca (tuple);
    }
  if (IsInsertEvent (tuple, INITPACKET))
    {
      Rh1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Rh1Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rh2_eca (tuple);
    }
}

void
SdnMacLearningBcast::Rc1_eca (Ptr<Tuple> ofPacket)
{
  RAPIDNET_LOG_INFO ("Rc1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    ofPacket,
    strlist ("ofconn_attr1", "ofconn_attr2"),
    strlist ("ofPacket_attr1", "ofPacket_attr2"));

  result = result->Project (
    FLOWMOD,
    strlist ("ofPacket_attr2",
      "ofPacket_attr4",
      "ofPacket_attr3",
      "ofPacket_attr2"),
    strlist ("flowMod_attr1",
      "flowMod_attr2",
      "flowMod_attr3",
      RN_DEST));

  Send (result);
}

void
SdnMacLearningBcast::Rc2_eca (Ptr<Tuple> ofPacket)
{
  RAPIDNET_LOG_INFO ("Rc2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    ofPacket,
    strlist ("ofconn_attr1", "ofconn_attr2"),
    strlist ("ofPacket_attr1", "ofPacket_attr2"));

  result = result->Project (
    BROADCAST,
    strlist ("ofPacket_attr2",
      "ofPacket_attr3",
      "ofPacket_attr4",
      "ofPacket_attr5",
      "ofPacket_attr2"),
    strlist ("broadcast_attr1",
      "broadcast_attr2",
      "broadcast_attr3",
      "broadcast_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearningBcast::Rs1_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    packet,
    strlist ("link_attr2", "link_attr1"),
    strlist ("packet_attr2", "packet_attr1"));

  result = GetRelation (MAXPRIORITY)->Join (
    result,
    strlist ("maxPriority_attr1"),
    strlist ("packet_attr1"));

  result = result->Project (
    MATCHINGPACKET,
    strlist ("packet_attr1",
      "packet_attr3",
      "packet_attr4",
      "link_attr3",
      "maxPriority_attr2"),
    strlist ("matchingPacket_attr1",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "matchingPacket_attr5"));

  SendLocal (result);
}

void
SdnMacLearningBcast::Rs2_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    matchingPacket,
    strlist ("flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr5", "matchingPacket_attr1"));

  result->Assign (Assignor::New ("NextPriority",
    Operation::New (RN_MINUS,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matchingPacket_attr3"),
      VarExpr::New ("flowEntry_attr2"))));

  result = result->Project (
    MATCHINGPACKET,
    strlist ("matchingPacket_attr1",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "NextPriority"),
    strlist ("matchingPacket_attr1",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "matchingPacket_attr4",
      "matchingPacket_attr5"));

  SendLocal (result);
}

void
SdnMacLearningBcast::Rs3_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FLOWENTRY)->Join (
    matchingPacket,
    strlist ("flowEntry_attr4", "flowEntry_attr1"),
    strlist ("matchingPacket_attr5", "matchingPacket_attr1"));

  result = GetRelation (LINK)->Join (
    result,
    strlist ("link_attr3", "link_attr1"),
    strlist ("flowEntry_attr3", "matchingPacket_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matchingPacket_attr3"),
      VarExpr::New ("flowEntry_attr2"))));

  result = result->Project (
    PACKET,
    strlist ("link_attr2",
      "matchingPacket_attr1",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "link_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearningBcast::Rs4_eca (Ptr<Tuple> matchingPacket)
{
  RAPIDNET_LOG_INFO ("Rs4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    matchingPacket,
    strlist ("ofconn_attr1"),
    strlist ("matchingPacket_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matchingPacket_attr5"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    OFPACKET,
    strlist ("ofconn_attr2",
      "matchingPacket_attr1",
      "matchingPacket_attr4",
      "matchingPacket_attr2",
      "matchingPacket_attr3",
      "ofconn_attr2"),
    strlist ("ofPacket_attr1",
      "ofPacket_attr2",
      "ofPacket_attr3",
      "ofPacket_attr4",
      "ofPacket_attr5",
      RN_DEST));

  Send (result);
}

void
SdnMacLearningBcast::Rs5_eca (Ptr<Tuple> flowMod)
{
  RAPIDNET_LOG_INFO ("Rs5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONN)->Join (
    flowMod,
    strlist ("ofconn_attr1"),
    strlist ("flowMod_attr1"));

  result = GetRelation (MAXPRIORITY)->Join (
    result,
    strlist ("maxPriority_attr1"),
    strlist ("flowMod_attr1"));

  result->Assign (Assignor::New ("Priority",
    Operation::New (RN_PLUS,
      VarExpr::New ("maxPriority_attr2"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    FLOWENTRY,
    strlist ("flowMod_attr1",
      "flowMod_attr2",
      "flowMod_attr3",
      "Priority"),
    strlist ("flowEntry_attr1",
      "flowEntry_attr2",
      "flowEntry_attr3",
      "flowEntry_attr4"));

  Insert (result);
}

void
SdnMacLearningBcast::Rs6Eca0Ins (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Rs6Eca0Ins triggered");

  Ptr<Tuple> result = flowEntry;

  result = result->Project (
    MAXPRIORITY,
    strlist ("flowEntry_attr1",
      "flowEntry_attr4"),
    strlist ("maxPriority_attr1",
      "maxPriority_attr2"));

  Insert (result);
}

void
SdnMacLearningBcast::Rs6Eca0Del (Ptr<Tuple> flowEntry)
{
  RAPIDNET_LOG_INFO ("Rs6Eca0Del triggered");

  Ptr<Tuple> result = flowEntry;

  result = result->Project (
    MAXPRIORITY,
    strlist ("flowEntry_attr1",
      "flowEntry_attr4"),
    strlist ("maxPriority_attr1",
      "maxPriority_attr2"));

  Delete (result);
}

void
SdnMacLearningBcast::Rs7_eca (Ptr<Tuple> broadcast)
{
  RAPIDNET_LOG_INFO ("Rs7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    broadcast,
    strlist ("link_attr1"),
    strlist ("broadcast_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("link_attr3"),
      VarExpr::New ("broadcast_attr2"))));

  result = result->Project (
    PACKET,
    strlist ("link_attr2",
      "broadcast_attr1",
      "broadcast_attr3",
      "broadcast_attr4",
      "link_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearningBcast::Rh1Eca0Ins (Ptr<Tuple> initPacket)
{
  RAPIDNET_LOG_INFO ("Rh1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    initPacket,
    strlist ("link_attr1", "link_attr2"),
    strlist ("initPacket_attr1", "initPacket_attr2"));

  result = result->Project (
    PACKET,
    strlist ("initPacket_attr2",
      "initPacket_attr1",
      "initPacket_attr3",
      "initPacket_attr4",
      "initPacket_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearningBcast::Rh1Eca1Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Rh1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (INITPACKET)->Join (
    link,
    strlist ("initPacket_attr1", "initPacket_attr2"),
    strlist ("link_attr1", "link_attr2"));

  result = result->Project (
    PACKET,
    strlist ("link_attr2",
      "link_attr1",
      "initPacket_attr3",
      "initPacket_attr4",
      "link_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
SdnMacLearningBcast::Rh2_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rh2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    packet,
    strlist ("link_attr1", "link_attr2"),
    strlist ("packet_attr1", "packet_attr2"));

  result = result->Project (
    RECVPACKET,
    strlist ("packet_attr1",
      "packet_attr3",
      "packet_attr4"),
    strlist ("recvPacket_attr1",
      "recvPacket_attr2",
      "recvPacket_attr3"));

  Insert (result);
}

