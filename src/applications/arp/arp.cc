/* A RapidNet application. Generated by RapidNet compiler. */

#include "arp.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::arp;

const string Arp::ARPMAPPING = "arpMapping";
const string Arp::ARPREPLY = "arpReply";
const string Arp::ARPREPLYCTL = "arpReplyCtl";
const string Arp::ARPREQCTL = "arpReqCtl";
const string Arp::ARPREQUEST = "arpRequest";
const string Arp::FLOWENTRY = "flowEntry";
const string Arp::HOSTPOS = "hostPos";
const string Arp::LINKHST = "linkHst";
const string Arp::LINKSWC = "linkSwc";
const string Arp::OFCONNCTL = "ofconnCtl";
const string Arp::OFCONNSWC = "ofconnSwc";
const string Arp::PACKET = "packet";
const string Arp::PACKETIN = "packetIn";
const string Arp::PACKETOUT = "packetOut";

NS_LOG_COMPONENT_DEFINE ("Arp");
NS_OBJECT_ENSURE_REGISTERED (Arp);

TypeId
Arp::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::arp::Arp")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Arp> ()
    ;
  return tid;
}

Arp::Arp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Arp::~Arp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Arp::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Arp::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Arp Application Started");
}

void
Arp::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Arp Application Stopped");
}

void
Arp::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ARPMAPPING, attrdeflist (
    attrdef ("arpMapping_attr2", IPV4)));

  AddRelationWithKeys (ARPREPLY, attrdeflist (
    attrdef ("arpReply_attr2", IPV4),
    attrdef ("arpReply_attr3", STR),
    attrdef ("arpReply_attr4", IPV4),
    attrdef ("arpReply_attr5", STR)));

  AddRelationWithKeys (ARPREQUEST, attrdeflist (
    attrdef ("arpRequest_attr2", IPV4),
    attrdef ("arpRequest_attr3", STR),
    attrdef ("arpRequest_attr4", IPV4),
    attrdef ("arpRequest_attr5", STR)));

  AddRelationWithKeys (FLOWENTRY, attrdeflist (
    attrdef ("flowEntry_attr2", STR)));

  AddRelationWithKeys (HOSTPOS, attrdeflist (
    attrdef ("hostPos_attr2", IPV4)));

  AddRelationWithKeys (LINKHST, attrdeflist (
    attrdef ("linkHst_attr3", INT32)));

  AddRelationWithKeys (LINKSWC, attrdeflist (
    attrdef ("linkSwc_attr3", INT32)));

  AddRelationWithKeys (OFCONNCTL, attrdeflist (
    attrdef ("ofconnCtl_attr2", IPV4)));

  AddRelationWithKeys (OFCONNSWC, attrdeflist (
    attrdef ("ofconnSwc_attr2", IPV4)));

}

void
Arp::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LINKHST))
    {
      Rh1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, ARPREQUEST))
    {
      Rh1Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rh2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKETIN))
    {
      Rc1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKETIN))
    {
      Rc2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ARPREQCTL))
    {
      Rc3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ARPREQCTL))
    {
      Rc4_eca (tuple);
    }
  if (IsRecvEvent (tuple, ARPREPLYCTL))
    {
      Rc6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKET))
    {
      Rs1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PACKETOUT))
    {
      Rs2_eca (tuple);
    }
}

void
Arp::Rh1Eca0Ins (Ptr<Tuple> linkHst)
{
  RAPIDNET_LOG_INFO ("Rh1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ARPREQUEST)->Join (
    linkHst,
    strlist ("arpRequest_attr1"),
    strlist ("linkHst_attr1"));

  result->Assign (Assignor::New ("PktLoad1",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("PktLoad2",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr5"),
      VarExpr::New ("PktLoad1"))));

  result->Assign (Assignor::New ("PktLoad3",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr4"),
      VarExpr::New ("PktLoad2"))));

  result->Assign (Assignor::New ("PktLoad4",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr3"),
      VarExpr::New ("PktLoad3"))));

  result->Assign (Assignor::New ("PktLoad5",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr2"),
      VarExpr::New ("PktLoad4"))));

  result->Assign (Assignor::New ("PktLoad6",
    FPrepend::New (
      ValueExpr::New (Int32Value::New (1)),
      VarExpr::New ("PktLoad5"))));

  result->Assign (Assignor::New ("PktLoad",
    FPrepend::New (
      ValueExpr::New (StrValue::New ("ARP")),
      VarExpr::New ("PktLoad6"))));

  result->Assign (Assignor::New ("Dst",
    ValueExpr::New (StrValue::New ("ff:ff:ff:ff:ff"))));

  result = result->Project (
    PACKET,
    strlist ("linkHst_attr2",
      "linkHst_attr1",
      "Dst",
      "PktLoad",
      "linkHst_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
Arp::Rh1Eca1Ins (Ptr<Tuple> arpRequest)
{
  RAPIDNET_LOG_INFO ("Rh1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINKHST)->Join (
    arpRequest,
    strlist ("linkHst_attr1"),
    strlist ("arpRequest_attr1"));

  result->Assign (Assignor::New ("PktLoad1",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("PktLoad2",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr5"),
      VarExpr::New ("PktLoad1"))));

  result->Assign (Assignor::New ("PktLoad3",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr4"),
      VarExpr::New ("PktLoad2"))));

  result->Assign (Assignor::New ("PktLoad4",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr3"),
      VarExpr::New ("PktLoad3"))));

  result->Assign (Assignor::New ("PktLoad5",
    FPrepend::New (
      VarExpr::New ("arpRequest_attr2"),
      VarExpr::New ("PktLoad4"))));

  result->Assign (Assignor::New ("PktLoad6",
    FPrepend::New (
      ValueExpr::New (Int32Value::New (1)),
      VarExpr::New ("PktLoad5"))));

  result->Assign (Assignor::New ("PktLoad",
    FPrepend::New (
      ValueExpr::New (StrValue::New ("ARP")),
      VarExpr::New ("PktLoad6"))));

  result->Assign (Assignor::New ("Dst",
    ValueExpr::New (StrValue::New ("ff:ff:ff:ff:ff"))));

  result = result->Project (
    PACKET,
    strlist ("linkHst_attr2",
      "arpRequest_attr1",
      "Dst",
      "PktLoad",
      "linkHst_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

void
Arp::Rh2_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rh2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINKHST)->Join (
    packet,
    strlist ("linkHst_attr1", "linkHst_attr2"),
    strlist ("packet_attr1", "packet_attr2"));

  result->Assign (Assignor::New ("PktLoad1",
    FRemoveFirst::New (
      VarExpr::New ("packet_attr4"))));

  result->Assign (Assignor::New ("PktLoad2",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad1"))));

  result->Assign (Assignor::New ("SrcIp",
    FFirst::New (
      VarExpr::New ("PktLoad2"))));

  result->Assign (Assignor::New ("PktLoad3",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad2"))));

  result->Assign (Assignor::New ("SrcMac",
    FFirst::New (
      VarExpr::New ("PktLoad3"))));

  result->Assign (Assignor::New ("PktLoad4",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad3"))));

  result->Assign (Assignor::New ("DstIp",
    FFirst::New (
      VarExpr::New ("PktLoad4"))));

  result->Assign (Assignor::New ("PktLoad5",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad4"))));

  result->Assign (Assignor::New ("DstMac",
    FFirst::New (
      VarExpr::New ("PktLoad5"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      ValueExpr::New (StrValue::New ("ARP")),
      FFirst::New (
        VarExpr::New ("packet_attr4")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      ValueExpr::New (Int32Value::New (2)),
      FFirst::New (
        VarExpr::New ("PktLoad1")))));

  result = result->Project (
    ARPREPLY,
    strlist ("packet_attr1",
      "SrcIp",
      "SrcMac",
      "DstIp",
      "DstMac"),
    strlist ("arpReply_attr1",
      "arpReply_attr2",
      "arpReply_attr3",
      "arpReply_attr4",
      "arpReply_attr5"));

  Insert (result);
}

void
Arp::Rc1_eca (Ptr<Tuple> packetIn)
{
  RAPIDNET_LOG_INFO ("Rc1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONNCTL)->Join (
    packetIn,
    strlist ("ofconnCtl_attr1", "ofconnCtl_attr2"),
    strlist ("packetIn_attr1", "packetIn_attr2"));

  result->Assign (Assignor::New ("SrcHost",
    FFirst::New (
      VarExpr::New ("packetIn_attr4"))));

  result = result->Project (
    HOSTPOS,
    strlist ("packetIn_attr1",
      "SrcHost",
      "packetIn_attr2",
      "packetIn_attr3"),
    strlist ("hostPos_attr1",
      "hostPos_attr2",
      "hostPos_attr3",
      "hostPos_attr4"));

  Insert (result);
}

void
Arp::Rc2_eca (Ptr<Tuple> packetIn)
{
  RAPIDNET_LOG_INFO ("Rc2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONNCTL)->Join (
    packetIn,
    strlist ("ofconnCtl_attr1", "ofconnCtl_attr2"),
    strlist ("packetIn_attr1", "packetIn_attr2"));

  result->Assign (Assignor::New ("PktLoad1",
    FRemoveFirst::New (
      VarExpr::New ("packetIn_attr4"))));

  result->Assign (Assignor::New ("PktLoad2",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad1"))));

  result->Assign (Assignor::New ("PktLoad3",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad2"))));

  result->Assign (Assignor::New ("PktLoad4",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad3"))));

  result->Assign (Assignor::New ("SrcIp",
    FFirst::New (
      VarExpr::New ("PktLoad4"))));

  result->Assign (Assignor::New ("PktLoad5",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad4"))));

  result->Assign (Assignor::New ("SrcMac",
    FFirst::New (
      VarExpr::New ("PktLoad5"))));

  result->Assign (Assignor::New ("PktLoad6",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad5"))));

  result->Assign (Assignor::New ("DstIp",
    FFirst::New (
      VarExpr::New ("PktLoad6"))));

  result->Assign (Assignor::New ("PktLoad7",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad6"))));

  result->Assign (Assignor::New ("DstMac",
    FFirst::New (
      VarExpr::New ("PktLoad7"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      ValueExpr::New (StrValue::New ("ARP")),
      FFirst::New (
        VarExpr::New ("PktLoad2")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      ValueExpr::New (Int32Value::New (1)),
      FFirst::New (
        VarExpr::New ("PktLoad3")))));

  result = result->Project (
    ARPREQCTL,
    strlist ("packetIn_attr1",
      "SrcIp",
      "SrcMac",
      "DstIp",
      "DstMac"),
    strlist ("arpReqCtl_attr1",
      "arpReqCtl_attr2",
      "arpReqCtl_attr3",
      "arpReqCtl_attr4",
      "arpReqCtl_attr5"));

  SendLocal (result);
}

void
Arp::Rc3_eca (Ptr<Tuple> arpReqCtl)
{
  RAPIDNET_LOG_INFO ("Rc3_eca triggered");

  Ptr<Tuple> result = arpReqCtl;

  result = result->Project (
    ARPMAPPING,
    strlist ("arpReqCtl_attr1",
      "arpReqCtl_attr2",
      "arpReqCtl_attr3"),
    strlist ("arpMapping_attr1",
      "arpMapping_attr2",
      "arpMapping_attr3"));

  Insert (result);
}

void
Arp::Rc4_eca (Ptr<Tuple> arpReqCtl)
{
  RAPIDNET_LOG_INFO ("Rc4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ARPMAPPING)->Join (
    arpReqCtl,
    strlist ("arpMapping_attr1", "arpMapping_attr2"),
    strlist ("arpReqCtl_attr1", "arpReqCtl_attr4"));

  result = result->Project (
    ARPREPLYCTL,
    strlist ("arpReqCtl_attr1",
      "arpReqCtl_attr4",
      "arpMapping_attr3",
      "arpReqCtl_attr2",
      "arpReqCtl_attr3"),
    strlist ("arpReplyCtl_attr1",
      "arpReplyCtl_attr2",
      "arpReplyCtl_attr3",
      "arpReplyCtl_attr4",
      "arpReplyCtl_attr5"));

  SendLocal (result);
}

void
Arp::Rc6_eca (Ptr<Tuple> arpReplyCtl)
{
  RAPIDNET_LOG_INFO ("Rc6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONNCTL)->Join (
    arpReplyCtl,
    strlist ("ofconnCtl_attr1"),
    strlist ("arpReplyCtl_attr1"));

  result = GetRelation (HOSTPOS)->Join (
    result,
    strlist ("hostPos_attr1", "hostPos_attr2", "hostPos_attr3"),
    strlist ("arpReplyCtl_attr1", "arpReplyCtl_attr2", "ofconnCtl_attr2"));

  result->Assign (Assignor::New ("PktLoad1",
    FEmpty::New (
)));

  result->Assign (Assignor::New ("PktLoad2",
    FPrepend::New (
      VarExpr::New ("arpReplyCtl_attr5"),
      VarExpr::New ("PktLoad1"))));

  result->Assign (Assignor::New ("PktLoad3",
    FPrepend::New (
      VarExpr::New ("arpReplyCtl_attr4"),
      VarExpr::New ("PktLoad2"))));

  result->Assign (Assignor::New ("PktLoad4",
    FPrepend::New (
      VarExpr::New ("arpReplyCtl_attr3"),
      VarExpr::New ("PktLoad3"))));

  result->Assign (Assignor::New ("PktLoad5",
    FPrepend::New (
      VarExpr::New ("arpReplyCtl_attr2"),
      VarExpr::New ("PktLoad4"))));

  result->Assign (Assignor::New ("PktLoad6",
    FPrepend::New (
      ValueExpr::New (Int32Value::New (2)),
      VarExpr::New ("PktLoad5"))));

  result->Assign (Assignor::New ("PktLoad",
    FPrepend::New (
      ValueExpr::New (StrValue::New ("ARP")),
      VarExpr::New ("PktLoad6"))));

  result->Assign (Assignor::New ("Pkt1",
    FPrepend::New (
      VarExpr::New ("arpReplyCtl_attr4"),
      VarExpr::New ("PktLoad"))));

  result->Assign (Assignor::New ("Pkt",
    FPrepend::New (
      VarExpr::New ("arpReplyCtl_attr2"),
      VarExpr::New ("Pkt1"))));

  result = result->Project (
    PACKETOUT,
    strlist ("ofconnCtl_attr2",
      "arpReplyCtl_attr1",
      "hostPos_attr4",
      "Pkt",
      "ofconnCtl_attr2"),
    strlist ("packetOut_attr1",
      "packetOut_attr2",
      "packetOut_attr3",
      "packetOut_attr4",
      RN_DEST));

  Send (result);
}

void
Arp::Rs1_eca (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("Rs1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (OFCONNSWC)->Join (
    packet,
    strlist ("ofconnSwc_attr1"),
    strlist ("packet_attr1"));

  result = GetRelation (LINKSWC)->Join (
    result,
    strlist ("linkSwc_attr2", "linkSwc_attr1"),
    strlist ("packet_attr2", "packet_attr1"));

  result = GetRelation (FLOWENTRY)->Join (
    result,
    strlist ("flowEntry_attr1"),
    strlist ("packet_attr1"));

  result->Assign (Assignor::New ("Pkt1",
    FPrepend::New (
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr4"))));

  result->Assign (Assignor::New ("Pkt",
    FPrepend::New (
      VarExpr::New ("packet_attr2"),
      VarExpr::New ("Pkt1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("flowEntry_attr2"),
      ValueExpr::New (StrValue::New ("ARP")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("flowEntry_attr2"),
      FFirst::New (
        VarExpr::New ("packet_attr4")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("flowEntry_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("flowEntry_attr4"),
      ValueExpr::New (StrValue::New ("controller")))));

  result = result->Project (
    PACKETIN,
    strlist ("ofconnSwc_attr2",
      "packet_attr1",
      "linkSwc_attr3",
      "Pkt",
      "ofconnSwc_attr2"),
    strlist ("packetIn_attr1",
      "packetIn_attr2",
      "packetIn_attr3",
      "packetIn_attr4",
      RN_DEST));

  Send (result);
}

void
Arp::Rs2_eca (Ptr<Tuple> packetOut)
{
  RAPIDNET_LOG_INFO ("Rs2_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINKSWC)->Join (
    packetOut,
    strlist ("linkSwc_attr1"),
    strlist ("packetOut_attr1"));

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("linkSwc_attr2")));

  result->Assign (Assignor::New ("PktLoad1",
    FRemoveFirst::New (
      VarExpr::New ("packetOut_attr4"))));

  result->Assign (Assignor::New ("PktLoad",
    FRemoveFirst::New (
      VarExpr::New ("PktLoad1"))));

  result = result->Project (
    PACKET,
    strlist ("linkSwc_attr2",
      "packetOut_attr1",
      "$1",
      "PktLoad",
      "linkSwc_attr2"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      RN_DEST));

  Send (result);
}

